# source: http://localhost:1337/graphql
# timestamp: Fri May 22 2020 23:18:21 GMT+0300 (East Africa Time)

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

type Bid {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Deadline: Date
  Location: String
  description: String
  requirement: String
  howToApply: String
  attachment: UploadFile
}

type BidAggregator {
  count: Int
  totalCount: Int
}

type BidConnection {
  values: [Bid]
  groupBy: BidGroupBy
  aggregate: BidAggregator
}

type BidConnectionAttachment {
  key: ID
  connection: BidConnection
}

type BidConnectionCreated_at {
  key: DateTime
  connection: BidConnection
}

type BidConnectionDeadline {
  key: ID
  connection: BidConnection
}

type BidConnectionDescription {
  key: String
  connection: BidConnection
}

type BidConnectionHowToApply {
  key: String
  connection: BidConnection
}

type BidConnectionId {
  key: ID
  connection: BidConnection
}

type BidConnectionLocation {
  key: String
  connection: BidConnection
}

type BidConnectionRequirement {
  key: String
  connection: BidConnection
}

type BidConnectionTitle {
  key: String
  connection: BidConnection
}

type BidConnectionUpdated_at {
  key: DateTime
  connection: BidConnection
}

type BidGroupBy {
  id: [BidConnectionId]
  created_at: [BidConnectionCreated_at]
  updated_at: [BidConnectionUpdated_at]
  Title: [BidConnectionTitle]
  Deadline: [BidConnectionDeadline]
  Location: [BidConnectionLocation]
  description: [BidConnectionDescription]
  requirement: [BidConnectionRequirement]
  howToApply: [BidConnectionHowToApply]
  attachment: [BidConnectionAttachment]
}

input BidInput {
  Title: String
  Deadline: Date
  Location: String
  description: String
  requirement: String
  howToApply: String
  attachment: ID
}

type Branches {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  physicalAddress: String
  workingHours: String
  dealerTypes: [ComponentDealerTypesDealerTypes]
  mapCoordinates: String
  phoneNumbers: [ComponentPhoneNumbersPhoneNumber]
  emails: [ComponentEmailEmails]
  heroBG(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type BranchesAggregator {
  count: Int
  totalCount: Int
}

type BranchesConnection {
  values: [Branches]
  groupBy: BranchesGroupBy
  aggregate: BranchesAggregator
}

type BranchesConnectionCreated_at {
  key: DateTime
  connection: BranchesConnection
}

type BranchesConnectionId {
  key: ID
  connection: BranchesConnection
}

type BranchesConnectionMapCoordinates {
  key: String
  connection: BranchesConnection
}

type BranchesConnectionName {
  key: String
  connection: BranchesConnection
}

type BranchesConnectionPhysicalAddress {
  key: String
  connection: BranchesConnection
}

type BranchesConnectionUpdated_at {
  key: DateTime
  connection: BranchesConnection
}

type BranchesConnectionWorkingHours {
  key: String
  connection: BranchesConnection
}

type BranchesGroupBy {
  id: [BranchesConnectionId]
  created_at: [BranchesConnectionCreated_at]
  updated_at: [BranchesConnectionUpdated_at]
  name: [BranchesConnectionName]
  physicalAddress: [BranchesConnectionPhysicalAddress]
  workingHours: [BranchesConnectionWorkingHours]
  mapCoordinates: [BranchesConnectionMapCoordinates]
}

input BranchInput {
  name: String
  physicalAddress: String
  workingHours: String
  heroBG: [ID]
  dealerTypes: [ComponentDealerTypesDealerTypeInput]
  mapCoordinates: String
  phoneNumbers: [ComponentPhoneNumbersPhoneNumberInput]
  emails: [ComponentEmailEmailInput]
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

input ComponentDealerTypesDealerTypeInput {
  dealerType: ENUM_COMPONENTDEALERTYPESDEALERTYPES_DEALERTYPE
}

type ComponentDealerTypesDealerTypes {
  id: ID!
  dealerType: ENUM_COMPONENTDEALERTYPESDEALERTYPES_DEALERTYPE
}

input ComponentEmailEmailInput {
  email: String
}

type ComponentEmailEmails {
  id: ID!
  email: String
}

type ComponentFullServiceFullService {
  id: ID!
  title: String
  description: String
  serviceType: [ComponentServiceTypeServiceType]
}

input ComponentFullServiceFullServiceInput {
  title: String
  description: String
  serviceType: [ComponentServiceTypeServiceTypeInput]
}

type ComponentItemPropItemProp {
  id: ID!
  description: String
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentItemPropItemPropInput {
  images: [ID]
  description: String
}

type ComponentPhoneNumbersPhoneNumber {
  id: ID!
  phoneNumber: String
}

input ComponentPhoneNumbersPhoneNumberInput {
  phoneNumber: String
}

type ComponentServiceTypeServiceType {
  id: ID!
  title: String
  description: String
}

input ComponentServiceTypeServiceTypeInput {
  title: String
  description: String
}

input createBidInput {
  data: BidInput
}

type createBidPayload {
  bid: Bid
}

input createBranchInput {
  data: BranchInput
}

type createBranchPayload {
  branch: Branches
}

input createFileInput {
  data: FileInput
}

type createFilePayload {
  file: UploadFile
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVacancyInput {
  data: VacancyInput
}

type createVacancyPayload {
  vacancy: Vacancy
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteBidInput {
  where: InputID
}

type deleteBidPayload {
  bid: Bid
}

input deleteBranchInput {
  where: InputID
}

type deleteBranchPayload {
  branch: Branches
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteServicePayload {
  service: Services
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVacancyInput {
  where: InputID
}

type deleteVacancyPayload {
  vacancy: Vacancy
}

input editBidInput {
  Title: String
  Deadline: Date
  Location: String
  description: String
  requirement: String
  howToApply: String
  attachment: ID
}

input editBranchInput {
  name: String
  physicalAddress: String
  workingHours: String
  heroBG: [ID]
  dealerTypes: [editComponentDealerTypesDealerTypeInput]
  mapCoordinates: String
  phoneNumbers: [editComponentPhoneNumbersPhoneNumberInput]
  emails: [editComponentEmailEmailInput]
}

input editComponentDealerTypesDealerTypeInput {
  id: ID
  dealerType: ENUM_COMPONENTDEALERTYPESDEALERTYPES_DEALERTYPE
}

input editComponentEmailEmailInput {
  id: ID
  email: String
}

input editComponentFullServiceFullServiceInput {
  id: ID
  title: String
  description: String
  serviceType: [editComponentServiceTypeServiceTypeInput]
}

input editComponentItemPropItemPropInput {
  id: ID
  images: [ID]
  description: String
}

input editComponentPhoneNumbersPhoneNumberInput {
  id: ID
  phoneNumber: String
}

input editComponentServiceTypeServiceTypeInput {
  id: ID
  title: String
  description: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editProductInput {
  name: String
  motto: String
  overview: editComponentItemPropItemPropInput
  design: editComponentItemPropItemPropInput
  performance: String
  specification: String
  attachment: ID
  active: Boolean
  colors: editComponentItemPropItemPropInput
  link: String
  categories: ENUM_PRODUCTS_CATEGORIES
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editServiceInput {
  title: String
  heroBg: ID
  motto: String
  fullService: editComponentFullServiceFullServiceInput
  serviceType: [editComponentServiceTypeServiceTypeInput]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input editVacancyInput {
  title: String
  type: ENUM_VACANCY_TYPE
  location: String
  deadline: Date
  description: String
  requirements: String
  attachment: ID
  howToApply: String
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int
  salary: String
}

enum ENUM_COMPONENTDEALERTYPESDEALERTYPES_DEALERTYPE {
  VEHICLE_SALES
  PART_SALES
  SERVICE
}

enum ENUM_PRODUCTS_CATEGORIES {
  NISSAN_MOTOR_VEHICLES
  UD_TRUCKS
  VE_COMMERCIAL_VEHICLES
  UNICARRIERS_FORKLIFT
  MACPOWER_BATTERY
}

enum ENUM_VACANCY_SALARYPERIOD {
  ONE_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ENUM_VACANCY_TYPE {
  FULL_TIME
  PART_TIME
  CONTRACTUAL
  INTERNSHIP
  SEASONAL
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type ForgotPassword {
  ok: Boolean
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | ForgotPassword | Bid | BidConnection | BidAggregator | BidGroupBy | BidConnectionId | BidConnectionCreated_at | BidConnectionUpdated_at | BidConnectionTitle | BidConnectionDeadline | BidConnectionLocation | BidConnectionDescription | BidConnectionRequirement | BidConnectionHowToApply | BidConnectionAttachment | createBidPayload | updateBidPayload | deleteBidPayload | Branches | BranchesConnection | BranchesAggregator | BranchesGroupBy | BranchesConnectionId | BranchesConnectionCreated_at | BranchesConnectionUpdated_at | BranchesConnectionName | BranchesConnectionPhysicalAddress | BranchesConnectionWorkingHours | BranchesConnectionMapCoordinates | createBranchPayload | updateBranchPayload | deleteBranchPayload | Products | ProductsConnection | ProductsAggregator | ProductsGroupBy | ProductsConnectionId | ProductsConnectionCreated_at | ProductsConnectionUpdated_at | ProductsConnectionName | ProductsConnectionMotto | ProductsConnectionOverview | ProductsConnectionDesign | ProductsConnectionPerformance | ProductsConnectionSpecification | ProductsConnectionAttachment | ProductsConnectionActive | ProductsConnectionColors | ProductsConnectionLink | ProductsConnectionCategories | createProductPayload | updateProductPayload | deleteProductPayload | Services | updateServicePayload | deleteServicePayload | Vacancy | VacancyConnection | VacancyAggregator | VacancyAggregatorSum | VacancyAggregatorAvg | VacancyAggregatorMin | VacancyAggregatorMax | VacancyGroupBy | VacancyConnectionId | VacancyConnectionCreated_at | VacancyConnectionUpdated_at | VacancyConnectionTitle | VacancyConnectionType | VacancyConnectionLocation | VacancyConnectionDeadline | VacancyConnectionDescription | VacancyConnectionRequirements | VacancyConnectionAttachment | VacancyConnectionHowToApply | VacancyConnectionSalaryPeriod | VacancyConnectionQuantity | VacancyConnectionSalary | createVacancyPayload | updateVacancyPayload | deleteVacancyPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | createFilePayload | updateFilePayload | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentDealerTypesDealerTypes | ComponentEmailEmails | ComponentFullServiceFullService | ComponentItemPropItemProp | ComponentPhoneNumbersPhoneNumber | ComponentServiceTypeServiceType

type Mutation {
  createBid(input: createBidInput): createBidPayload
  updateBid(input: updateBidInput): updateBidPayload
  deleteBid(input: deleteBidInput): deleteBidPayload
  createBranch(input: createBranchInput): createBranchPayload
  updateBranch(input: updateBranchInput): updateBranchPayload
  deleteBranch(input: deleteBranchInput): deleteBranchPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  updateService(input: updateServiceInput): updateServicePayload
  deleteService: deleteServicePayload
  createVacancy(input: createVacancyInput): createVacancyPayload
  updateVacancy(input: updateVacancyInput): updateVacancyPayload
  deleteVacancy(input: deleteVacancyInput): deleteVacancyPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): ForgotPassword
  changePassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

input ProductInput {
  name: String
  motto: String
  overview: ComponentItemPropItemPropInput
  design: ComponentItemPropItemPropInput
  performance: String
  specification: String
  attachment: ID
  active: Boolean
  colors: ComponentItemPropItemPropInput
  link: String
  categories: ENUM_PRODUCTS_CATEGORIES
}

type Products {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  motto: String
  overview: ComponentItemPropItemProp
  design: ComponentItemPropItemProp
  performance: String
  specification: String
  attachment: UploadFile
  active: Boolean
  colors: ComponentItemPropItemProp
  link: String
  categories: ENUM_PRODUCTS_CATEGORIES
}

type ProductsAggregator {
  count: Int
  totalCount: Int
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsConnectionActive {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionAttachment {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCategories {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionColors {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCreated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionDesign {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionLink {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionMotto {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionName {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionOverview {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionPerformance {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionSpecification {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionUpdated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  created_at: [ProductsConnectionCreated_at]
  updated_at: [ProductsConnectionUpdated_at]
  name: [ProductsConnectionName]
  motto: [ProductsConnectionMotto]
  overview: [ProductsConnectionOverview]
  design: [ProductsConnectionDesign]
  performance: [ProductsConnectionPerformance]
  specification: [ProductsConnectionSpecification]
  attachment: [ProductsConnectionAttachment]
  active: [ProductsConnectionActive]
  colors: [ProductsConnectionColors]
  link: [ProductsConnectionLink]
  categories: [ProductsConnectionCategories]
}

type Query {
  bid(id: ID!): Bid
  bids(sort: String, limit: Int, start: Int, where: JSON): [Bid]
  bidsConnection(sort: String, limit: Int, start: Int, where: JSON): BidConnection
  branch(id: ID!): Branches
  branches(sort: String, limit: Int, start: Int, where: JSON): [Branches]
  branchesConnection(sort: String, limit: Int, start: Int, where: JSON): BranchesConnection
  product(id: ID!): Products
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  service: Services
  vacancy(id: ID!): Vacancy
  vacancies(sort: String, limit: Int, start: Int, where: JSON): [Vacancy]
  vacanciesConnection(sort: String, limit: Int, start: Int, where: JSON): VacancyConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input ServiceInput {
  title: String
  heroBg: ID
  motto: String
  fullService: ComponentFullServiceFullServiceInput
  serviceType: [ComponentServiceTypeServiceTypeInput]
}

type Services {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  heroBg: UploadFile
  motto: String
  fullService: ComponentFullServiceFullService
  serviceType: [ComponentServiceTypeServiceType]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateBidInput {
  where: InputID
  data: editBidInput
}

type updateBidPayload {
  bid: Bid
}

input updateBranchInput {
  where: InputID
  data: editBranchInput
}

type updateBranchPayload {
  branch: Branches
}

input updateFileInput {
  where: InputID
  data: editFileInput
}

type updateFilePayload {
  file: UploadFile
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateServiceInput {
  data: editServiceInput
}

type updateServicePayload {
  service: Services
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVacancyInput {
  where: InputID
  data: editVacancyInput
}

type updateVacancyPayload {
  vacancy: Vacancy
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type Vacancy {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  type: ENUM_VACANCY_TYPE!
  location: String!
  deadline: Date!
  description: String!
  requirements: String!
  attachment: UploadFile
  howToApply: String!
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int!
  salary: String
}

type VacancyAggregator {
  count: Int
  totalCount: Int
  sum: VacancyAggregatorSum
  avg: VacancyAggregatorAvg
  min: VacancyAggregatorMin
  max: VacancyAggregatorMax
}

type VacancyAggregatorAvg {
  quantity: Float
}

type VacancyAggregatorMax {
  quantity: Float
}

type VacancyAggregatorMin {
  quantity: Float
}

type VacancyAggregatorSum {
  quantity: Float
}

type VacancyConnection {
  values: [Vacancy]
  groupBy: VacancyGroupBy
  aggregate: VacancyAggregator
}

type VacancyConnectionAttachment {
  key: ID
  connection: VacancyConnection
}

type VacancyConnectionCreated_at {
  key: DateTime
  connection: VacancyConnection
}

type VacancyConnectionDeadline {
  key: ID
  connection: VacancyConnection
}

type VacancyConnectionDescription {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionHowToApply {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionId {
  key: ID
  connection: VacancyConnection
}

type VacancyConnectionLocation {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionQuantity {
  key: Int
  connection: VacancyConnection
}

type VacancyConnectionRequirements {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionSalary {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionSalaryPeriod {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionTitle {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionType {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionUpdated_at {
  key: DateTime
  connection: VacancyConnection
}

type VacancyGroupBy {
  id: [VacancyConnectionId]
  created_at: [VacancyConnectionCreated_at]
  updated_at: [VacancyConnectionUpdated_at]
  title: [VacancyConnectionTitle]
  type: [VacancyConnectionType]
  location: [VacancyConnectionLocation]
  deadline: [VacancyConnectionDeadline]
  description: [VacancyConnectionDescription]
  requirements: [VacancyConnectionRequirements]
  attachment: [VacancyConnectionAttachment]
  howToApply: [VacancyConnectionHowToApply]
  salaryPeriod: [VacancyConnectionSalaryPeriod]
  quantity: [VacancyConnectionQuantity]
  salary: [VacancyConnectionSalary]
}

input VacancyInput {
  title: String!
  type: ENUM_VACANCY_TYPE!
  location: String!
  deadline: Date!
  description: String!
  requirements: String!
  attachment: ID
  howToApply: String!
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int!
  salary: String
}
