type About {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  overviewHistory: String
  values: String
  mission: String
  achievements: String
  boardMessage: [ComponentBoardMessageBoardMessage]
  awardImg(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  slideImg(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input AboutInput {
  overviewHistory: String
  values: String
  mission: String
  achievements: String
  awardImg: [ID]
  slideImg: [ID]
  boardMessage: [ComponentBoardMessageBoardMessageInput]
}

type Bid {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Deadline: Date
  Location: String
  description: String
  requirement: String
  howToApply: String
  attachment: UploadFile
}

type BidAggregator {
  count: Int
  totalCount: Int
}

type BidConnection {
  values: [Bid]
  groupBy: BidGroupBy
  aggregate: BidAggregator
}

type BidConnectionAttachment {
  key: ID
  connection: BidConnection
}

type BidConnectionCreated_at {
  key: DateTime
  connection: BidConnection
}

type BidConnectionDeadline {
  key: ID
  connection: BidConnection
}

type BidConnectionDescription {
  key: String
  connection: BidConnection
}

type BidConnectionHowToApply {
  key: String
  connection: BidConnection
}

type BidConnectionId {
  key: ID
  connection: BidConnection
}

type BidConnectionLocation {
  key: String
  connection: BidConnection
}

type BidConnectionRequirement {
  key: String
  connection: BidConnection
}

type BidConnectionTitle {
  key: String
  connection: BidConnection
}

type BidConnectionUpdated_at {
  key: DateTime
  connection: BidConnection
}

type BidGroupBy {
  id: [BidConnectionId]
  created_at: [BidConnectionCreated_at]
  updated_at: [BidConnectionUpdated_at]
  Title: [BidConnectionTitle]
  Deadline: [BidConnectionDeadline]
  Location: [BidConnectionLocation]
  description: [BidConnectionDescription]
  requirement: [BidConnectionRequirement]
  howToApply: [BidConnectionHowToApply]
  attachment: [BidConnectionAttachment]
}

input BidInput {
  Title: String
  Deadline: Date
  Location: String
  description: String
  requirement: String
  howToApply: String
  attachment: ID
}

type Branch {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  physicalAddress: String!
  workingHours: String!
  heroBG: UploadFile
  dealerTypes: [ComponentBranchDealerType]
  mapCoordinates: String
  phoneNumbers: [ComponentBranchPhoneNumbers]
  emails: [ComponentBranchEmail]
}

type BranchAggregator {
  count: Int
  totalCount: Int
}

type BranchConnection {
  values: [Branch]
  groupBy: BranchGroupBy
  aggregate: BranchAggregator
}

type BranchConnectionCreated_at {
  key: DateTime
  connection: BranchConnection
}

type BranchConnectionHeroBG {
  key: ID
  connection: BranchConnection
}

type BranchConnectionId {
  key: ID
  connection: BranchConnection
}

type BranchConnectionMapCoordinates {
  key: String
  connection: BranchConnection
}

type BranchConnectionName {
  key: String
  connection: BranchConnection
}

type BranchConnectionPhysicalAddress {
  key: String
  connection: BranchConnection
}

type BranchConnectionUpdated_at {
  key: DateTime
  connection: BranchConnection
}

type BranchConnectionWorkingHours {
  key: String
  connection: BranchConnection
}

type BranchGroupBy {
  id: [BranchConnectionId]
  created_at: [BranchConnectionCreated_at]
  updated_at: [BranchConnectionUpdated_at]
  name: [BranchConnectionName]
  physicalAddress: [BranchConnectionPhysicalAddress]
  workingHours: [BranchConnectionWorkingHours]
  heroBG: [BranchConnectionHeroBG]
  mapCoordinates: [BranchConnectionMapCoordinates]
}

input BranchInput {
  name: String!
  physicalAddress: String!
  workingHours: String!
  heroBG: ID
  dealerTypes: [ComponentBranchDealerTypeInput]
  mapCoordinates: String
  phoneNumbers: [ComponentBranchPhoneNumberInput]
  emails: [ComponentBranchEmailInput]
}

type ComponentBoardMessageBoardMessage {
  id: ID!
  name: String
  position: String
  img: UploadFile
  message: String
}

input ComponentBoardMessageBoardMessageInput {
  name: String
  position: String
  img: ID
  message: String
}

type ComponentBranchDealerType {
  id: ID!
  dealerType: ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE
}

input ComponentBranchDealerTypeInput {
  dealerType: ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE
}

type ComponentBranchEmail {
  id: ID!
  email: String
}

input ComponentBranchEmailInput {
  email: String
}

input ComponentBranchPhoneNumberInput {
  phoneNumber: String
}

type ComponentBranchPhoneNumbers {
  id: ID!
  phoneNumber: String
}

type ComponentDealerTypeDealerType {
  id: ID!
  dealerType: String
}

input ComponentDealerTypeDealerTypeInput {
  dealerType: String
}

type ComponentProductTypeProductType {
  id: ID!
  name: String
  motto: String
  description: String
  specification: [ComponentSpecificationSpecification]
  link: String
  active: Boolean
  brochure: UploadFile
  headerImgs(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentProductTypeProductTypeInput {
  name: String
  motto: String
  description: String
  headerImgs: [ID]
  specification: [ComponentSpecificationSpecificationInput]
  link: String
  active: Boolean
  brochure: ID
}

type ComponentServiceTypeServiceType {
  id: ID!
  title: String
  description: String
}

input ComponentServiceTypeServiceTypeInput {
  title: String
  description: String
}

type ComponentSpecificationSpecification {
  id: ID!
  title: String
  description: String
  specImages(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentSpecificationSpecificationInput {
  title: String
  description: String
  specImages: [ID]
}

input createBidInput {
  data: BidInput
}

type createBidPayload {
  bid: Bid
}

input createBranchInput {
  data: BranchInput
}

type createBranchPayload {
  branch: Branch
}

input createFaqInput {
  data: FaqInput
}

type createFaqPayload {
  faq: Faq
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Products
}

input createPublicationInput {
  data: PublicationInput
}

type createPublicationPayload {
  publication: Publications
}

input createReportInput {
  data: ReportInput
}

type createReportPayload {
  report: Report
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createShowroomInput {
  data: ShowroomInput
}

type createShowroomPayload {
  showroom: Showroom
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVacancyInput {
  data: VacancyInput
}

type createVacancyPayload {
  vacancy: Vacancy
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type deleteAboutPayload {
  about: About
}

input deleteBidInput {
  where: InputID
}

type deleteBidPayload {
  bid: Bid
}

input deleteBranchInput {
  where: InputID
}

type deleteBranchPayload {
  branch: Branch
}

input deleteFaqInput {
  where: InputID
}

type deleteFaqPayload {
  faq: Faq
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Products
}

input deletePublicationInput {
  where: InputID
}

type deletePublicationPayload {
  publication: Publications
}

input deleteReportInput {
  where: InputID
}

type deleteReportPayload {
  report: Report
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteServicePayload {
  service: Services
}

input deleteShowroomInput {
  where: InputID
}

type deleteShowroomPayload {
  showroom: Showroom
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVacancyInput {
  where: InputID
}

type deleteVacancyPayload {
  vacancy: Vacancy
}

input editAboutInput {
  overviewHistory: String
  values: String
  mission: String
  achievements: String
  awardImg: [ID]
  slideImg: [ID]
  boardMessage: [editComponentBoardMessageBoardMessageInput]
}

input editBidInput {
  Title: String
  Deadline: Date
  Location: String
  description: String
  requirement: String
  howToApply: String
  attachment: ID
}

input editBranchInput {
  name: String
  physicalAddress: String
  workingHours: String
  heroBG: ID
  dealerTypes: [editComponentBranchDealerTypeInput]
  mapCoordinates: String
  phoneNumbers: [editComponentBranchPhoneNumberInput]
  emails: [editComponentBranchEmailInput]
}

input editComponentBoardMessageBoardMessageInput {
  id: ID
  name: String
  position: String
  img: ID
  message: String
}

input editComponentBranchDealerTypeInput {
  id: ID
  dealerType: ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE
}

input editComponentBranchEmailInput {
  id: ID
  email: String
}

input editComponentBranchPhoneNumberInput {
  id: ID
  phoneNumber: String
}

input editComponentDealerTypeDealerTypeInput {
  id: ID
  dealerType: String
}

input editComponentProductTypeProductTypeInput {
  id: ID
  name: String
  motto: String
  description: String
  headerImgs: [ID]
  specification: [editComponentSpecificationSpecificationInput]
  link: String
  active: Boolean
  brochure: ID
}

input editComponentServiceTypeServiceTypeInput {
  id: ID
  title: String
  description: String
}

input editComponentSpecificationSpecificationInput {
  id: ID
  title: String
  description: String
  specImages: [ID]
}

input editFaqInput {
  question: String
  answer: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editProductInput {
  category: ENUM_PRODUCTS_CATEGORY
  name: String
  motto: String
  description: String
  headerImg: ID
  specification: [editComponentSpecificationSpecificationInput]
  link: String
  active: Boolean
  brochure: ID
  eachCategory: ENUM_PRODUCTS_EACHCATEGORY
}

input editPublicationInput {
  title: String
  excerpt: String
  description: String
  picture: ID
  author: String
  featured: Boolean
}

input editReportInput {
  title: String
  type: ENUM_REPORT_TYPE
  excerpt: String
  attachments: ID
  featured: Boolean
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editServiceInput {
  serviceType: [editComponentServiceTypeServiceTypeInput]
}

input editShowroomInput {
  image: [ID]
  description: String
  date: Date
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input editVacancyInput {
  title: String
  type: ENUM_VACANCY_TYPE
  location: String
  deadline: DateTime
  description: String
  requirements: String
  attachment: ID
  howToApply: String
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int
  salary: String
  applyByCV: Boolean
}

enum ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE {
  VEHICLE_SALES
  PART_SALES
  SERVICE
}

enum ENUM_PRODUCTS_CATEGORY {
  NISSAN
  UD_TRUCKS
  UNICARRIER
  EICHER
  MAC_POWER
}

enum ENUM_PRODUCTS_EACHCATEGORY {
  PASSENGER
  CROSSOVER
  SPORT_UTILITY
  COMMERCIAL
  CRONER
  QUESTER
}

enum ENUM_REPORT_TYPE {
  ANNUAL
  QUARTER
  SEMIANNUAL
  FINANCIAL
}

enum ENUM_VACANCY_SALARYPERIOD {
  ONE_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ENUM_VACANCY_TYPE {
  FULL_TIME
  PART_TIME
  CONTRACTUAL
  INTERNSHIP
  SEASONAL
}

type Faq {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  question: String
  answer: String
}

type FaqAggregator {
  count: Int
  totalCount: Int
}

type FaqConnection {
  values: [Faq]
  groupBy: FaqGroupBy
  aggregate: FaqAggregator
}

type FaqConnectionAnswer {
  key: String
  connection: FaqConnection
}

type FaqConnectionCreated_at {
  key: DateTime
  connection: FaqConnection
}

type FaqConnectionId {
  key: ID
  connection: FaqConnection
}

type FaqConnectionQuestion {
  key: String
  connection: FaqConnection
}

type FaqConnectionUpdated_at {
  key: DateTime
  connection: FaqConnection
}

type FaqGroupBy {
  id: [FaqConnectionId]
  created_at: [FaqConnectionCreated_at]
  updated_at: [FaqConnectionUpdated_at]
  question: [FaqConnectionQuestion]
  answer: [FaqConnectionAnswer]
}

input FaqInput {
  question: String
  answer: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | About | updateAboutPayload | deleteAboutPayload | Bid | BidConnection | BidAggregator | BidGroupBy | BidConnectionId | BidConnectionCreated_at | BidConnectionUpdated_at | BidConnectionTitle | BidConnectionDeadline | BidConnectionLocation | BidConnectionDescription | BidConnectionRequirement | BidConnectionHowToApply | BidConnectionAttachment | createBidPayload | updateBidPayload | deleteBidPayload | Branch | BranchConnection | BranchAggregator | BranchGroupBy | BranchConnectionId | BranchConnectionCreated_at | BranchConnectionUpdated_at | BranchConnectionName | BranchConnectionPhysicalAddress | BranchConnectionWorkingHours | BranchConnectionHeroBG | BranchConnectionMapCoordinates | createBranchPayload | updateBranchPayload | deleteBranchPayload | Faq | FaqConnection | FaqAggregator | FaqGroupBy | FaqConnectionId | FaqConnectionCreated_at | FaqConnectionUpdated_at | FaqConnectionQuestion | FaqConnectionAnswer | createFaqPayload | updateFaqPayload | deleteFaqPayload | Products | ProductsConnection | ProductsAggregator | ProductsGroupBy | ProductsConnectionId | ProductsConnectionCreated_at | ProductsConnectionUpdated_at | ProductsConnectionCategory | ProductsConnectionName | ProductsConnectionMotto | ProductsConnectionDescription | ProductsConnectionHeaderImg | ProductsConnectionLink | ProductsConnectionActive | ProductsConnectionBrochure | ProductsConnectionEachCategory | createProductPayload | updateProductPayload | deleteProductPayload | Publications | PublicationsConnection | PublicationsAggregator | PublicationsGroupBy | PublicationsConnectionId | PublicationsConnectionCreated_at | PublicationsConnectionUpdated_at | PublicationsConnectionTitle | PublicationsConnectionExcerpt | PublicationsConnectionDescription | PublicationsConnectionPicture | PublicationsConnectionAuthor | PublicationsConnectionFeatured | createPublicationPayload | updatePublicationPayload | deletePublicationPayload | Report | ReportConnection | ReportAggregator | ReportGroupBy | ReportConnectionId | ReportConnectionCreated_at | ReportConnectionUpdated_at | ReportConnectionTitle | ReportConnectionType | ReportConnectionExcerpt | ReportConnectionAttachments | ReportConnectionFeatured | createReportPayload | updateReportPayload | deleteReportPayload | Services | updateServicePayload | deleteServicePayload | Showroom | ShowroomConnection | ShowroomAggregator | ShowroomGroupBy | ShowroomConnectionId | ShowroomConnectionCreated_at | ShowroomConnectionUpdated_at | ShowroomConnectionDescription | ShowroomConnectionDate | createShowroomPayload | updateShowroomPayload | deleteShowroomPayload | Vacancy | VacancyConnection | VacancyAggregator | VacancyAggregatorSum | VacancyAggregatorAvg | VacancyAggregatorMin | VacancyAggregatorMax | VacancyGroupBy | VacancyConnectionId | VacancyConnectionCreated_at | VacancyConnectionUpdated_at | VacancyConnectionTitle | VacancyConnectionType | VacancyConnectionLocation | VacancyConnectionDeadline | VacancyConnectionDescription | VacancyConnectionRequirements | VacancyConnectionAttachment | VacancyConnectionHowToApply | VacancyConnectionSalaryPeriod | VacancyConnectionQuantity | VacancyConnectionSalary | VacancyConnectionApplyByCV | createVacancyPayload | updateVacancyPayload | deleteVacancyPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentBoardMessageBoardMessage | ComponentBranchDealerType | ComponentBranchEmail | ComponentBranchPhoneNumbers | ComponentDealerTypeDealerType | ComponentProductTypeProductType | ComponentServiceTypeServiceType | ComponentSpecificationSpecification

type Mutation {
  updateAbout(input: updateAboutInput): updateAboutPayload
  deleteAbout: deleteAboutPayload
  createBid(input: createBidInput): createBidPayload
  updateBid(input: updateBidInput): updateBidPayload
  deleteBid(input: deleteBidInput): deleteBidPayload
  createBranch(input: createBranchInput): createBranchPayload
  updateBranch(input: updateBranchInput): updateBranchPayload
  deleteBranch(input: deleteBranchInput): deleteBranchPayload
  createFaq(input: createFaqInput): createFaqPayload
  updateFaq(input: updateFaqInput): updateFaqPayload
  deleteFaq(input: deleteFaqInput): deleteFaqPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createPublication(input: createPublicationInput): createPublicationPayload
  updatePublication(input: updatePublicationInput): updatePublicationPayload
  deletePublication(input: deletePublicationInput): deletePublicationPayload
  createReport(input: createReportInput): createReportPayload
  updateReport(input: updateReportInput): updateReportPayload
  deleteReport(input: deleteReportInput): deleteReportPayload
  updateService(input: updateServiceInput): updateServicePayload
  deleteService: deleteServicePayload
  createShowroom(input: createShowroomInput): createShowroomPayload
  updateShowroom(input: updateShowroomInput): updateShowroomPayload
  deleteShowroom(input: deleteShowroomInput): deleteShowroomPayload
  createVacancy(input: createVacancyInput): createVacancyPayload
  updateVacancy(input: updateVacancyInput): updateVacancyPayload
  deleteVacancy(input: deleteVacancyInput): deleteVacancyPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

input ProductInput {
  category: ENUM_PRODUCTS_CATEGORY
  name: String
  motto: String
  description: String
  headerImg: ID
  specification: [ComponentSpecificationSpecificationInput]
  link: String
  active: Boolean
  brochure: ID
  eachCategory: ENUM_PRODUCTS_EACHCATEGORY
}

type Products {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  category: ENUM_PRODUCTS_CATEGORY
  name: String
  motto: String
  description: String
  headerImg: UploadFile
  specification: [ComponentSpecificationSpecification]
  link: String
  active: Boolean
  brochure: UploadFile
  eachCategory: ENUM_PRODUCTS_EACHCATEGORY
}

type ProductsAggregator {
  count: Int
  totalCount: Int
}

type ProductsConnection {
  values: [Products]
  groupBy: ProductsGroupBy
  aggregate: ProductsAggregator
}

type ProductsConnectionActive {
  key: Boolean
  connection: ProductsConnection
}

type ProductsConnectionBrochure {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionCategory {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionCreated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsConnectionDescription {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionEachCategory {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionHeaderImg {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionId {
  key: ID
  connection: ProductsConnection
}

type ProductsConnectionLink {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionMotto {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionName {
  key: String
  connection: ProductsConnection
}

type ProductsConnectionUpdated_at {
  key: DateTime
  connection: ProductsConnection
}

type ProductsGroupBy {
  id: [ProductsConnectionId]
  created_at: [ProductsConnectionCreated_at]
  updated_at: [ProductsConnectionUpdated_at]
  category: [ProductsConnectionCategory]
  name: [ProductsConnectionName]
  motto: [ProductsConnectionMotto]
  description: [ProductsConnectionDescription]
  headerImg: [ProductsConnectionHeaderImg]
  link: [ProductsConnectionLink]
  active: [ProductsConnectionActive]
  brochure: [ProductsConnectionBrochure]
  eachCategory: [ProductsConnectionEachCategory]
}

input PublicationInput {
  title: String
  excerpt: String
  description: String
  picture: ID
  author: String
  featured: Boolean
}

type Publications {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  excerpt: String
  description: String
  picture: UploadFile
  author: String
  featured: Boolean
}

type PublicationsAggregator {
  count: Int
  totalCount: Int
}

type PublicationsConnection {
  values: [Publications]
  groupBy: PublicationsGroupBy
  aggregate: PublicationsAggregator
}

type PublicationsConnectionAuthor {
  key: String
  connection: PublicationsConnection
}

type PublicationsConnectionCreated_at {
  key: DateTime
  connection: PublicationsConnection
}

type PublicationsConnectionDescription {
  key: String
  connection: PublicationsConnection
}

type PublicationsConnectionExcerpt {
  key: String
  connection: PublicationsConnection
}

type PublicationsConnectionFeatured {
  key: Boolean
  connection: PublicationsConnection
}

type PublicationsConnectionId {
  key: ID
  connection: PublicationsConnection
}

type PublicationsConnectionPicture {
  key: ID
  connection: PublicationsConnection
}

type PublicationsConnectionTitle {
  key: String
  connection: PublicationsConnection
}

type PublicationsConnectionUpdated_at {
  key: DateTime
  connection: PublicationsConnection
}

type PublicationsGroupBy {
  id: [PublicationsConnectionId]
  created_at: [PublicationsConnectionCreated_at]
  updated_at: [PublicationsConnectionUpdated_at]
  title: [PublicationsConnectionTitle]
  excerpt: [PublicationsConnectionExcerpt]
  description: [PublicationsConnectionDescription]
  picture: [PublicationsConnectionPicture]
  author: [PublicationsConnectionAuthor]
  featured: [PublicationsConnectionFeatured]
}

type Query {
  about: About
  bid(id: ID!): Bid
  bids(sort: String, limit: Int, start: Int, where: JSON): [Bid]
  bidsConnection(sort: String, limit: Int, start: Int, where: JSON): BidConnection
  branch(id: ID!): Branch
  branches(sort: String, limit: Int, start: Int, where: JSON): [Branch]
  branchesConnection(sort: String, limit: Int, start: Int, where: JSON): BranchConnection
  faq(id: ID!): Faq
  faqs(sort: String, limit: Int, start: Int, where: JSON): [Faq]
  faqsConnection(sort: String, limit: Int, start: Int, where: JSON): FaqConnection
  product(id: ID!): Products
  products(sort: String, limit: Int, start: Int, where: JSON): [Products]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductsConnection
  publication(id: ID!): Publications
  publications(sort: String, limit: Int, start: Int, where: JSON): [Publications]
  publicationsConnection(sort: String, limit: Int, start: Int, where: JSON): PublicationsConnection
  report(id: ID!): Report
  reports(sort: String, limit: Int, start: Int, where: JSON): [Report]
  reportsConnection(sort: String, limit: Int, start: Int, where: JSON): ReportConnection
  service: Services
  showroom(id: ID!): Showroom
  showrooms(sort: String, limit: Int, start: Int, where: JSON): [Showroom]
  showroomsConnection(sort: String, limit: Int, start: Int, where: JSON): ShowroomConnection
  vacancy(id: ID!): Vacancy
  vacancies(sort: String, limit: Int, start: Int, where: JSON): [Vacancy]
  vacanciesConnection(sort: String, limit: Int, start: Int, where: JSON): VacancyConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Report {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  type: ENUM_REPORT_TYPE!
  excerpt: String!
  attachments: UploadFile
  featured: Boolean
}

type ReportAggregator {
  count: Int
  totalCount: Int
}

type ReportConnection {
  values: [Report]
  groupBy: ReportGroupBy
  aggregate: ReportAggregator
}

type ReportConnectionAttachments {
  key: ID
  connection: ReportConnection
}

type ReportConnectionCreated_at {
  key: DateTime
  connection: ReportConnection
}

type ReportConnectionExcerpt {
  key: String
  connection: ReportConnection
}

type ReportConnectionFeatured {
  key: Boolean
  connection: ReportConnection
}

type ReportConnectionId {
  key: ID
  connection: ReportConnection
}

type ReportConnectionTitle {
  key: String
  connection: ReportConnection
}

type ReportConnectionType {
  key: String
  connection: ReportConnection
}

type ReportConnectionUpdated_at {
  key: DateTime
  connection: ReportConnection
}

type ReportGroupBy {
  id: [ReportConnectionId]
  created_at: [ReportConnectionCreated_at]
  updated_at: [ReportConnectionUpdated_at]
  title: [ReportConnectionTitle]
  type: [ReportConnectionType]
  excerpt: [ReportConnectionExcerpt]
  attachments: [ReportConnectionAttachments]
  featured: [ReportConnectionFeatured]
}

input ReportInput {
  title: String!
  type: ENUM_REPORT_TYPE!
  excerpt: String!
  attachments: ID
  featured: Boolean
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input ServiceInput {
  serviceType: [ComponentServiceTypeServiceTypeInput]
}

type Services {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  serviceType: [ComponentServiceTypeServiceType]
}

type Showroom {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  description: String
  date: Date
  image(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ShowroomAggregator {
  count: Int
  totalCount: Int
}

type ShowroomConnection {
  values: [Showroom]
  groupBy: ShowroomGroupBy
  aggregate: ShowroomAggregator
}

type ShowroomConnectionCreated_at {
  key: DateTime
  connection: ShowroomConnection
}

type ShowroomConnectionDate {
  key: ID
  connection: ShowroomConnection
}

type ShowroomConnectionDescription {
  key: String
  connection: ShowroomConnection
}

type ShowroomConnectionId {
  key: ID
  connection: ShowroomConnection
}

type ShowroomConnectionUpdated_at {
  key: DateTime
  connection: ShowroomConnection
}

type ShowroomGroupBy {
  id: [ShowroomConnectionId]
  created_at: [ShowroomConnectionCreated_at]
  updated_at: [ShowroomConnectionUpdated_at]
  description: [ShowroomConnectionDescription]
  date: [ShowroomConnectionDate]
}

input ShowroomInput {
  image: [ID]
  description: String
  date: Date
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateAboutInput {
  data: editAboutInput
}

type updateAboutPayload {
  about: About
}

input updateBidInput {
  where: InputID
  data: editBidInput
}

type updateBidPayload {
  bid: Bid
}

input updateBranchInput {
  where: InputID
  data: editBranchInput
}

type updateBranchPayload {
  branch: Branch
}

input updateFaqInput {
  where: InputID
  data: editFaqInput
}

type updateFaqPayload {
  faq: Faq
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Products
}

input updatePublicationInput {
  where: InputID
  data: editPublicationInput
}

type updatePublicationPayload {
  publication: Publications
}

input updateReportInput {
  where: InputID
  data: editReportInput
}

type updateReportPayload {
  report: Report
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateServiceInput {
  data: editServiceInput
}

type updateServicePayload {
  service: Services
}

input updateShowroomInput {
  where: InputID
  data: editShowroomInput
}

type updateShowroomPayload {
  showroom: Showroom
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVacancyInput {
  where: InputID
  data: editVacancyInput
}

type updateVacancyPayload {
  vacancy: Vacancy
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type Vacancy {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  type: ENUM_VACANCY_TYPE
  location: String!
  deadline: DateTime
  description: String!
  requirements: String!
  attachment: UploadFile
  howToApply: String!
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int
  salary: String
  applyByCV: Boolean
}

type VacancyAggregator {
  count: Int
  totalCount: Int
  sum: VacancyAggregatorSum
  avg: VacancyAggregatorAvg
  min: VacancyAggregatorMin
  max: VacancyAggregatorMax
}

type VacancyAggregatorAvg {
  quantity: Float
}

type VacancyAggregatorMax {
  quantity: Float
}

type VacancyAggregatorMin {
  quantity: Float
}

type VacancyAggregatorSum {
  quantity: Float
}

type VacancyConnection {
  values: [Vacancy]
  groupBy: VacancyGroupBy
  aggregate: VacancyAggregator
}

type VacancyConnectionApplyByCV {
  key: Boolean
  connection: VacancyConnection
}

type VacancyConnectionAttachment {
  key: ID
  connection: VacancyConnection
}

type VacancyConnectionCreated_at {
  key: DateTime
  connection: VacancyConnection
}

type VacancyConnectionDeadline {
  key: DateTime
  connection: VacancyConnection
}

type VacancyConnectionDescription {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionHowToApply {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionId {
  key: ID
  connection: VacancyConnection
}

type VacancyConnectionLocation {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionQuantity {
  key: Int
  connection: VacancyConnection
}

type VacancyConnectionRequirements {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionSalary {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionSalaryPeriod {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionTitle {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionType {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionUpdated_at {
  key: DateTime
  connection: VacancyConnection
}

type VacancyGroupBy {
  id: [VacancyConnectionId]
  created_at: [VacancyConnectionCreated_at]
  updated_at: [VacancyConnectionUpdated_at]
  title: [VacancyConnectionTitle]
  type: [VacancyConnectionType]
  location: [VacancyConnectionLocation]
  deadline: [VacancyConnectionDeadline]
  description: [VacancyConnectionDescription]
  requirements: [VacancyConnectionRequirements]
  attachment: [VacancyConnectionAttachment]
  howToApply: [VacancyConnectionHowToApply]
  salaryPeriod: [VacancyConnectionSalaryPeriod]
  quantity: [VacancyConnectionQuantity]
  salary: [VacancyConnectionSalary]
  applyByCV: [VacancyConnectionApplyByCV]
}

input VacancyInput {
  title: String!
  type: ENUM_VACANCY_TYPE
  location: String!
  deadline: DateTime
  description: String!
  requirements: String!
  attachment: ID
  howToApply: String!
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int
  salary: String
  applyByCV: Boolean
}
