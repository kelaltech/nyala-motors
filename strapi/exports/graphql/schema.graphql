type Branch {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  physicalAddress: String!
  workingHours: String!
  heroBG: UploadFile
  dealerTypes: [ComponentBranchDealerType]
  mapCoordinates: String
  phoneNumbers: [ComponentBranchPhoneNumbers]
  emails: [ComponentBranchEmail]
}

type BranchAggregator {
  count: Int
  totalCount: Int
}

type BranchConnection {
  values: [Branch]
  groupBy: BranchGroupBy
  aggregate: BranchAggregator
}

type BranchConnectionCreated_at {
  key: DateTime
  connection: BranchConnection
}

type BranchConnectionHeroBG {
  key: ID
  connection: BranchConnection
}

type BranchConnectionId {
  key: ID
  connection: BranchConnection
}

type BranchConnectionMapCoordinates {
  key: String
  connection: BranchConnection
}

type BranchConnectionName {
  key: String
  connection: BranchConnection
}

type BranchConnectionPhysicalAddress {
  key: String
  connection: BranchConnection
}

type BranchConnectionUpdated_at {
  key: DateTime
  connection: BranchConnection
}

type BranchConnectionWorkingHours {
  key: String
  connection: BranchConnection
}

type BranchGroupBy {
  id: [BranchConnectionId]
  created_at: [BranchConnectionCreated_at]
  updated_at: [BranchConnectionUpdated_at]
  name: [BranchConnectionName]
  physicalAddress: [BranchConnectionPhysicalAddress]
  workingHours: [BranchConnectionWorkingHours]
  heroBG: [BranchConnectionHeroBG]
  mapCoordinates: [BranchConnectionMapCoordinates]
}

input BranchInput {
  name: String!
  physicalAddress: String!
  workingHours: String!
  heroBG: ID
  dealerTypes: [ComponentBranchDealerTypeInput]
  mapCoordinates: String
  phoneNumbers: [ComponentBranchPhoneNumberInput]
  emails: [ComponentBranchEmailInput]
}

type ComponentBranchDealerType {
  id: ID!
  dealerType: ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE
}

input ComponentBranchDealerTypeInput {
  dealerType: ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE
}

type ComponentBranchEmail {
  id: ID!
  email: String
}

input ComponentBranchEmailInput {
  email: String
}

input ComponentBranchPhoneNumberInput {
  phoneNumber: String
}

type ComponentBranchPhoneNumbers {
  id: ID!
  phoneNumber: String
}

input createBranchInput {
  data: BranchInput
}

type createBranchPayload {
  branch: Branch
}

input createReportInput {
  data: ReportInput
}

type createReportPayload {
  report: Report
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input createVacancyInput {
  data: VacancyInput
}

type createVacancyPayload {
  vacancy: Vacancy
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteBranchInput {
  where: InputID
}

type deleteBranchPayload {
  branch: Branch
}

input deleteReportInput {
  where: InputID
}

type deleteReportPayload {
  report: Report
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input deleteVacancyInput {
  where: InputID
}

type deleteVacancyPayload {
  vacancy: Vacancy
}

input editBranchInput {
  name: String
  physicalAddress: String
  workingHours: String
  heroBG: ID
  dealerTypes: [editComponentBranchDealerTypeInput]
  mapCoordinates: String
  phoneNumbers: [editComponentBranchPhoneNumberInput]
  emails: [editComponentBranchEmailInput]
}

input editComponentBranchDealerTypeInput {
  id: ID
  dealerType: ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE
}

input editComponentBranchEmailInput {
  id: ID
  email: String
}

input editComponentBranchPhoneNumberInput {
  id: ID
  phoneNumber: String
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editReportInput {
  title: String
  type: ENUM_REPORT_TYPE
  excerpt: String
  attachments: [ID]
  featured: Boolean
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input editVacancyInput {
  title: String
  type: ENUM_VACANCY_TYPE
  location: String
  deadline: DateTime
  description: String
  requirements: String
  attachment: ID
  howToApply: String
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int
  salary: String
}

enum ENUM_COMPONENTBRANCHDEALERTYPE_DEALERTYPE {
  VEHICLE_SALES
  PART_SALES
  SERVICE
}

enum ENUM_REPORT_TYPE {
  ANNUAL
  QUARTERLY
  OTHER
}

enum ENUM_VACANCY_SALARYPERIOD {
  ONE_TIME
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ENUM_VACANCY_TYPE {
  FULL_TIME
  PART_TIME
  CONTRACTUAL
  INTERNSHIP
  SEASONAL
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Branch | BranchConnection | BranchAggregator | BranchGroupBy | BranchConnectionId | BranchConnectionCreated_at | BranchConnectionUpdated_at | BranchConnectionName | BranchConnectionPhysicalAddress | BranchConnectionWorkingHours | BranchConnectionHeroBG | BranchConnectionMapCoordinates | createBranchPayload | updateBranchPayload | deleteBranchPayload | Report | ReportConnection | ReportAggregator | ReportGroupBy | ReportConnectionId | ReportConnectionCreated_at | ReportConnectionUpdated_at | ReportConnectionTitle | ReportConnectionType | ReportConnectionExcerpt | ReportConnectionFeatured | createReportPayload | updateReportPayload | deleteReportPayload | Vacancy | VacancyConnection | VacancyAggregator | VacancyAggregatorSum | VacancyAggregatorAvg | VacancyAggregatorMin | VacancyAggregatorMax | VacancyGroupBy | VacancyConnectionId | VacancyConnectionCreated_at | VacancyConnectionUpdated_at | VacancyConnectionTitle | VacancyConnectionType | VacancyConnectionLocation | VacancyConnectionDeadline | VacancyConnectionDescription | VacancyConnectionRequirements | VacancyConnectionAttachment | VacancyConnectionHowToApply | VacancyConnectionSalaryPeriod | VacancyConnectionQuantity | VacancyConnectionSalary | createVacancyPayload | updateVacancyPayload | deleteVacancyPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentBranchDealerType | ComponentBranchEmail | ComponentBranchPhoneNumbers

type Mutation {
  createBranch(input: createBranchInput): createBranchPayload
  updateBranch(input: updateBranchInput): updateBranchPayload
  deleteBranch(input: deleteBranchInput): deleteBranchPayload
  createReport(input: createReportInput): createReportPayload
  updateReport(input: updateReportInput): updateReportPayload
  deleteReport(input: deleteReportInput): deleteReportPayload
  createVacancy(input: createVacancyInput): createVacancyPayload
  updateVacancy(input: updateVacancyInput): updateVacancyPayload
  deleteVacancy(input: deleteVacancyInput): deleteVacancyPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Query {
  branch(id: ID!): Branch
  branches(sort: String, limit: Int, start: Int, where: JSON): [Branch]
  branchesConnection(sort: String, limit: Int, start: Int, where: JSON): BranchConnection
  report(id: ID!): Report
  reports(sort: String, limit: Int, start: Int, where: JSON): [Report]
  reportsConnection(sort: String, limit: Int, start: Int, where: JSON): ReportConnection
  vacancy(id: ID!): Vacancy
  vacancies(sort: String, limit: Int, start: Int, where: JSON): [Vacancy]
  vacanciesConnection(sort: String, limit: Int, start: Int, where: JSON): VacancyConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Report {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  type: ENUM_REPORT_TYPE!
  excerpt: String!
  featured: Boolean
  attachments(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type ReportAggregator {
  count: Int
  totalCount: Int
}

type ReportConnection {
  values: [Report]
  groupBy: ReportGroupBy
  aggregate: ReportAggregator
}

type ReportConnectionCreated_at {
  key: DateTime
  connection: ReportConnection
}

type ReportConnectionExcerpt {
  key: String
  connection: ReportConnection
}

type ReportConnectionFeatured {
  key: Boolean
  connection: ReportConnection
}

type ReportConnectionId {
  key: ID
  connection: ReportConnection
}

type ReportConnectionTitle {
  key: String
  connection: ReportConnection
}

type ReportConnectionType {
  key: String
  connection: ReportConnection
}

type ReportConnectionUpdated_at {
  key: DateTime
  connection: ReportConnection
}

type ReportGroupBy {
  id: [ReportConnectionId]
  created_at: [ReportConnectionCreated_at]
  updated_at: [ReportConnectionUpdated_at]
  title: [ReportConnectionTitle]
  type: [ReportConnectionType]
  excerpt: [ReportConnectionExcerpt]
  featured: [ReportConnectionFeatured]
}

input ReportInput {
  title: String!
  type: ENUM_REPORT_TYPE!
  excerpt: String!
  attachments: [ID]
  featured: Boolean
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateBranchInput {
  where: InputID
  data: editBranchInput
}

type updateBranchPayload {
  branch: Branch
}

input updateReportInput {
  where: InputID
  data: editReportInput
}

type updateReportPayload {
  report: Report
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input updateVacancyInput {
  where: InputID
  data: editVacancyInput
}

type updateVacancyPayload {
  vacancy: Vacancy
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type Vacancy {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  type: ENUM_VACANCY_TYPE
  location: String!
  deadline: DateTime
  description: String!
  requirements: String!
  attachment: UploadFile
  howToApply: String!
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int
  salary: String
}

type VacancyAggregator {
  count: Int
  totalCount: Int
  sum: VacancyAggregatorSum
  avg: VacancyAggregatorAvg
  min: VacancyAggregatorMin
  max: VacancyAggregatorMax
}

type VacancyAggregatorAvg {
  quantity: Float
}

type VacancyAggregatorMax {
  quantity: Float
}

type VacancyAggregatorMin {
  quantity: Float
}

type VacancyAggregatorSum {
  quantity: Float
}

type VacancyConnection {
  values: [Vacancy]
  groupBy: VacancyGroupBy
  aggregate: VacancyAggregator
}

type VacancyConnectionAttachment {
  key: ID
  connection: VacancyConnection
}

type VacancyConnectionCreated_at {
  key: DateTime
  connection: VacancyConnection
}

type VacancyConnectionDeadline {
  key: DateTime
  connection: VacancyConnection
}

type VacancyConnectionDescription {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionHowToApply {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionId {
  key: ID
  connection: VacancyConnection
}

type VacancyConnectionLocation {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionQuantity {
  key: Int
  connection: VacancyConnection
}

type VacancyConnectionRequirements {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionSalary {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionSalaryPeriod {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionTitle {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionType {
  key: String
  connection: VacancyConnection
}

type VacancyConnectionUpdated_at {
  key: DateTime
  connection: VacancyConnection
}

type VacancyGroupBy {
  id: [VacancyConnectionId]
  created_at: [VacancyConnectionCreated_at]
  updated_at: [VacancyConnectionUpdated_at]
  title: [VacancyConnectionTitle]
  type: [VacancyConnectionType]
  location: [VacancyConnectionLocation]
  deadline: [VacancyConnectionDeadline]
  description: [VacancyConnectionDescription]
  requirements: [VacancyConnectionRequirements]
  attachment: [VacancyConnectionAttachment]
  howToApply: [VacancyConnectionHowToApply]
  salaryPeriod: [VacancyConnectionSalaryPeriod]
  quantity: [VacancyConnectionQuantity]
  salary: [VacancyConnectionSalary]
}

input VacancyInput {
  title: String!
  type: ENUM_VACANCY_TYPE
  location: String!
  deadline: DateTime
  description: String!
  requirements: String!
  attachment: ID
  howToApply: String!
  salaryPeriod: ENUM_VACANCY_SALARYPERIOD
  quantity: Int
  salary: String
}
